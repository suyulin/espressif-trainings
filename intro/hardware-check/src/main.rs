use anyhow::Result;
use esp_idf_hal::gpio::*;
use esp_idf_hal::prelude::Peripherals;
use esp_idf_svc::wifi::{BlockingWifi, EspWifi};
use esp_idf_svc::{eventloop::EspSystemEventLoop, nvs::EspDefaultNvsPartition};
use log::info;

use rgb_led::{RGB8, WS2812RMT};
// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;
use wifi::connect_wifi;
/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
// #[toml_cfg::toml_config]
// pub struct Config {
//     #[default("")]
//     wifi_ssid: &'static str,
//     #[default("")]
//     wifi_psk: &'static str,
// }

/// Entry point to our application.
///
/// It sets up a Wi-Fi connection to the Access Point given in the
/// configuration, then blinks the RGB LED green/blue.
///
/// If the LED goes solid red, then it was unable to connect to your Wi-Fi
/// network.
fn main() -> anyhow::Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sys_loop = EspSystemEventLoop::take()?;
    let nvs = EspDefaultNvsPartition::take()?;
    info!("init");
    // The constant `CONFIG` is auto-generated by `toml_config`.
    // let app_config = CONFIG;
    let mut led = PinDriver::output(peripherals.pins.gpio40)?;
    // Connect to the Wi-Fi network
    let mut wifi = BlockingWifi::wrap(
        EspWifi::new(peripherals.modem, sys_loop.clone(), Some(nvs))?,
        sys_loop,
    )?;

    connect_wifi(&mut wifi)?;

    let ip_info = wifi.wifi().sta_netif().get_ip_info()?;

    info!("Wifi DHCP info: {:?}", ip_info);

    loop {
        led.toggle()?;
        std::thread::sleep(std::time::Duration::from_secs(1));
        info!("LED changed");
    }
}
